/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Basic health check
         * @description Returns the current health status of the service
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authenticated health check
         * @description Returns the current health status of the service. Requires a valid API key to access. Use this endpoint to validate that your API key is configured correctly.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identify/card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Identifies a baseball card from the submitted image
         * @description Identify a baseball card from an image. Supports both multipart/form-data and direct binary upload (image/jpeg, image/png, etc.)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            requestId: string;
                            detections?: {
                                /**
                                 * @description Confidence level of the card identification
                                 * @enum {string}
                                 */
                                confidence: "High" | "Medium" | "Low";
                                card?: {
                                    /** @description UUID of the card */
                                    id: string;
                                    year: string;
                                    manufacturer: string;
                                    releaseName: string;
                                    setName?: string;
                                    name: string;
                                    number?: string;
                                };
                            }[];
                            processingTime?: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                408: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comprehensive catalog statistics
         * @description
         *     # Catalog Statistics
         *
         *     This endpoint provides comprehensive statistics about the entire card catalog database.
         *
         *     **Purpose:**
         *     Collectors can view high-level metrics to understand the scope and breadth of the CardSight AI catalog. This helps inform collecting strategies by showing:
         *     - What segments and manufacturers are available
         *     - How many releases exist per year
         *     - The depth of card data (base cards vs parallels vs variations)
         *     - AI identification capabilities
         *
         *     **Response Structure:**
         *
         *     **Segments:**
         *     - Total count of sports/card segments
         *     - Breakdown showing each segment name with release count
         *
         *     **Manufacturers:**
         *     - Total count of card manufacturers
         *     - All manufacturers with their release counts
         *
         *     **Releases:**
         *     - Total count across all years
         *     - Breakdown by segment with total releases per segment
         *     - Within each segment, year-by-year breakdown of release counts
         *
         *     **Sets:**
         *     - Total count of card sets
         *     - Count of identifiable sets (sets that can be recognized by AI)
         *
         *     **Cards:**
         *     - Total count of all cards in catalog
         *     - Count of base cards (original cards)
         *     - Count of variations (alternate versions of base cards)
         *
         *     **Parallels:**
         *     - Total count of parallel types
         *     - Count of full set parallels (apply to entire set)
         *     - Count of partial parallels (apply to specific cards only)
         *
         *     **Caching:**
         *     This endpoint is cached for 1 hour to optimize performance since catalog statistics change infrequently.
         *
         *     **Use Cases:**
         *     - Understanding catalog coverage before starting a collection
         *     - Identifying which manufacturers have the most complete data
         *     - Seeing historical trends in releases by year
         *     - Gauging AI identification capabilities for specific sets
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Segment statistics */
                            segments: {
                                /** @description Total number of segments */
                                total: number;
                                /** @description Breakdown of segments with release counts */
                                breakdown: {
                                    /** @description Segment name */
                                    name: string;
                                    /** @description Number of releases in this segment */
                                    count: number;
                                }[];
                            };
                            /** @description Manufacturer statistics */
                            manufacturers: {
                                /** @description Total number of manufacturers */
                                total: number;
                                /** @description All manufacturers with their release counts */
                                breakdown: {
                                    /** @description Manufacturer name */
                                    name: string;
                                    /** @description Number of releases by this manufacturer */
                                    releaseCount: number;
                                }[];
                            };
                            /** @description Release statistics */
                            releases: {
                                /** @description Total number of releases across all years */
                                total: number;
                                /** @description Breakdown by segment, then by year */
                                bySegment: {
                                    /** @description Segment name */
                                    segmentName: string;
                                    /** @description Total releases in this segment across all years */
                                    total: number;
                                    /** @description Year-by-year breakdown for this segment */
                                    byYear: {
                                        /** @description Release year */
                                        year: string;
                                        /** @description Number of releases in this year for this segment */
                                        count: number;
                                    }[];
                                }[];
                            };
                            /** @description Set statistics */
                            sets: {
                                /** @description Total number of card sets */
                                total: number;
                                /** @description Number of sets that can be recognized by AI */
                                identifiable: number;
                            };
                            /** @description Card statistics */
                            cards: {
                                /** @description Total number of all cards in catalog */
                                total: number;
                                /** @description Count of base cards (original cards) */
                                base: number;
                                /** @description Count of card variations */
                                variations: number;
                            };
                            /** @description Parallel statistics */
                            parallels: {
                                /** @description Total number of parallel types */
                                total: number;
                                /** @description Count of full set parallels (apply to entire set) */
                                fullSet: number;
                                /** @description Count of partial parallels (apply to specific cards only) */
                                partial: number;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List market segments
         * @description Retrieve a paginated list of market segments (categories) for trading cards. Segments are the highest level of organization, representing markets like Baseball, Pokemon, Magic The Gathering, etc. Use this endpoint to get available segments for filtering releases or building category navigation. Segments can be searched by name and sorted alphabetically. Each segment may contain multiple manufacturers and releases.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter segments by name using partial string matching. Case-insensitive. Example: "sport" matches "Sports", "Motorsports", etc. */
                    name?: string;
                    /** @description Field to sort results by. Currently only supports sorting by segment name. */
                    sort?: "name";
                    /** @description Sort direction. "asc" for ascending (A-Z), "desc" for descending (Z-A). Defaults to ascending. */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            segments: {
                                /** @description Unique identifier for the segment. Format: UUID v4. This ID is permanent and used for all API operations involving this segment. */
                                id: string;
                                /** @description Display name of the segment. Examples: "Sports", "Entertainment", "Gaming". Used for categorizing releases and filtering. */
                                name: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            segments: {
                                /** @description Unique identifier for the segment. Format: UUID v4. This ID is permanent and used for all API operations involving this segment. */
                                id: string;
                                /** @description Display name of the segment. Examples: "Sports", "Entertainment", "Gaming". Used for categorizing releases and filtering. */
                                name: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/manufacturers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List card manufacturers
         * @description Retrieve a paginated list of trading card manufacturers/companies. Manufacturers are companies that produce trading cards (e.g., Topps, Panini, Upper Deck). Use this endpoint to get available manufacturers for filtering releases or understanding the card market landscape. Manufacturers can be searched by name and sorted alphabetically. Each manufacturer may have releases across multiple segments and years.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter manufacturers by name using partial string matching. Case-insensitive. Example: "top" matches "Topps", "Topps Chrome", etc. */
                    name?: string;
                    /** @description Field to sort results by. Currently only supports sorting by manufacturer name. */
                    sort?: "name";
                    /** @description Sort direction. "asc" for ascending (A-Z), "desc" for descending (Z-A). Defaults to ascending. */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            manufacturers: {
                                /** @description Unique identifier for the manufacturer. Format: UUID v4. This ID is permanent and used for all API operations involving this manufacturer. */
                                id: string;
                                /** @description Official name of the manufacturer. Examples: "Topps", "Panini America", "Upper Deck". This is the primary display name. */
                                name: string;
                                /** @description Additional information about the manufacturer, such as founding year, headquarters, or notable product lines. May be null if not provided. */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            manufacturers: {
                                /** @description Unique identifier for the manufacturer. Format: UUID v4. This ID is permanent and used for all API operations involving this manufacturer. */
                                id: string;
                                /** @description Official name of the manufacturer. Examples: "Topps", "Panini America", "Upper Deck". This is the primary display name. */
                                name: string;
                                /** @description Additional information about the manufacturer, such as founding year, headquarters, or notable product lines. May be null if not provided. */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/releases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Browse and search Releases with pagination
         * @description Browse and search Releases with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter releases by segment. Accepts either a UUID (e.g., "550e8400-e29b-41d4-a716-446655440000") or exact segment name (e.g., "Sports"). Case-insensitive for names. */
                    segment?: string;
                    /** @description Filter releases by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Case-insensitive for names. */
                    manufacturer?: string;
                    /** @description Filter by exact year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter releases from this year onwards (inclusive). Example: "2020" returns releases from 2020, 2021, 2022, etc. Ignored if "year" is specified. */
                    min_year?: string;
                    /** @description Filter releases up to this year (inclusive). Example: "2022" returns releases from 2022 and earlier. Ignored if "year" is specified. */
                    max_year?: string;
                    /** @description Search releases by name using partial string matching. Case-insensitive. Example: "chrome" matches "Topps Chrome", "Bowman Chrome", etc. */
                    name?: string;
                    /** @description Field to sort results by. "year" sorts by release year, "name" sorts alphabetically by release name. */
                    sort?: "year" | "name";
                    /** @description Sort direction. "asc" for ascending (oldest first for year, A-Z for name), "desc" for descending (newest first for year, Z-A for name). */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            releases: {
                                /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                                manufacturerId: string;
                                /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                                segmentId: string;
                                /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                                id: string;
                                /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                                year: string;
                                /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                                name: string;
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            releases: {
                                /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                                manufacturerId: string;
                                /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                                segmentId: string;
                                /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                                id: string;
                                /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                                year: string;
                                /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                                name: string;
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/releases/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed information about a specific Release
         * @description Get detailed information about a specific Release including Sets and Card counts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier for the release. Must be a valid UUID format. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                            id: string;
                            /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                            segmentId: string;
                            /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                            manufacturerId: string;
                            /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                            year: string;
                            /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                            name: string;
                            /** @description Additional details about the release, such as special features, number of cards, or notable inclusions. May be null. */
                            description?: string;
                            /** @description Sets within this release */
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                            id: string;
                            /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                            segmentId: string;
                            /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                            manufacturerId: string;
                            /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                            year: string;
                            /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                            name: string;
                            /** @description Additional details about the release, such as special features, number of cards, or notable inclusions. May be null. */
                            description?: string;
                            /** @description Sets within this release */
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/releases/{id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all cards in a release
         * @description Retrieve a paginated list of all base cards (not parallels) within a specific release across all its sets. Use the optional setId parameter to filter to a specific set within the release. Cards can be searched by player name and sorted by card number or name. This endpoint is ideal for building complete checklists, player searches within a release, or browsing all cards in a product.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter cards to a specific set within the release. Must be a valid UUID. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    setId?: string;
                    /** @description Search cards by player/subject name using partial string matching. Case-insensitive. Example: "jordan" matches "Michael Jordan", "Jordan Love", etc. */
                    name?: string;
                    /** @description Field to sort results by. "number" sorts by card number in set, "name" sorts alphabetically by player/subject name. */
                    sort?: "number" | "name";
                    /** @description Sort direction. "asc" for ascending (1-999 for number, A-Z for name), "desc" for descending (999-1 for number, Z-A for name). */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    /** @description Unique identifier for the release. Must be a valid UUID format. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/releases/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get random releases matching filters
         * @description Returns random releases instead of paginated sorted results. Useful for discovery features, random browsing, or showcasing variety in the catalog. Supports all standard release filters including year, manufacturer, segment, and name search. If count exceeds available matching releases, returns all available releases.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter releases by segment. Accepts either a UUID (e.g., "550e8400-e29b-41d4-a716-446655440000") or exact segment name (e.g., "Sports"). Case-insensitive for names. */
                    segment?: string;
                    /** @description Filter releases by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Case-insensitive for names. */
                    manufacturer?: string;
                    /** @description Filter by exact year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter releases from this year onwards (inclusive). Example: "2020" returns releases from 2020, 2021, 2022, etc. Ignored if "year" is specified. */
                    min_year?: string;
                    /** @description Filter releases up to this year (inclusive). Example: "2022" returns releases from 2022 and earlier. Ignored if "year" is specified. */
                    max_year?: string;
                    /** @description Search releases by name using partial string matching. Case-insensitive. Example: "chrome" matches "Topps Chrome", "Bowman Chrome", etc. */
                    name?: string;
                    /** @description Field to sort results by. "year" sorts by release year, "name" sorts alphabetically by release name. */
                    sort?: "year" | "name";
                    /** @description Sort direction. "asc" for ascending (oldest first for year, A-Z for name), "desc" for descending (newest first for year, Z-A for name). */
                    order?: "asc" | "desc";
                    /** @description Number of random releases to return. Minimum: 1, Maximum: 200, Default: 1. If fewer releases match filters, returns all available. */
                    count?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random releases matching the specified filters */
                            releases: {
                                /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                                manufacturerId: string;
                                /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                                segmentId: string;
                                /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                                id: string;
                                /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                                year: string;
                                /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                                name: string;
                                description?: string;
                            }[];
                            /** @description Actual number of releases returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random releases matching the specified filters */
                            releases: {
                                /** @description UUID of the manufacturer that produced this release. Links to the manufacturer entity. */
                                manufacturerId: string;
                                /** @description UUID of the segment this release belongs to. Links to the segment entity. Determines the market category (Sports, Entertainment, etc.). */
                                segmentId: string;
                                /** @description Unique identifier for the release. Format: UUID v4. This ID is permanent and used for all API operations involving this release. */
                                id: string;
                                /** @description Year the release was issued. Format: YYYY (e.g., "2023"). Used for chronological filtering and sorting. */
                                year: string;
                                /** @description Full name of the release. Typically includes year, brand, and sport/category. Example: "2023 Topps Chrome Baseball" */
                                name: string;
                                description?: string;
                            }[];
                            /** @description Actual number of releases returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List and search card sets
         * @description Retrieve a paginated list of card sets across all releases. Sets represent collections within releases (e.g., "Base Set", "Rookie Autographs"). Filter by release, year range, manufacturer, or search by name. Results include card and parallel counts for each set. Use this endpoint to explore available sets, build set checklists, or filter sets by specific criteria. Each set belongs to exactly one release.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter sets to a specific release. Must be a valid UUID. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    releaseId?: string;
                    /** @description Search sets by name using partial string matching. Case-insensitive. Example: "base" matches "Base Set", "Base Chrome", etc. */
                    name?: string;
                    /** @description Filter sets by exact release year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter sets from releases in this year onwards (inclusive). Example: "2020" returns sets from 2020, 2021, 2022 releases, etc. */
                    min_year?: string;
                    /** @description Filter sets from releases up to this year (inclusive). Example: "2022" returns sets from 2022 and earlier releases. */
                    max_year?: string;
                    /** @description Filter sets by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Filters through the release relationship. */
                    manufacturer?: string;
                    /** @description Field to sort results by. "name" sorts by set name, "year" sorts by release year then set name. */
                    sort?: "name" | "year";
                    /** @description Sort direction. "asc" for ascending, "desc" for descending. */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/sets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get complete set details
         * @description Retrieve comprehensive information about a specific set including its release context, card count, and all parallel variants. Returns the set details along with release information (name, year) and a complete list of parallel types available for cards in this set. Use this endpoint for detailed set views, understanding set composition, or displaying complete set information with all variants.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Set UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                            id: string;
                            /** @description UUID of the release this set belongs to. Links to the release entity. A release typically contains multiple sets. */
                            releaseId: string;
                            /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                            name: string;
                            /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                            description?: string;
                            /** @description Name of the release */
                            releaseName: string;
                            /** @description Year of the release */
                            releaseYear: string;
                            /** @description Number of base cards */
                            cardCount: number;
                            /** @description Number of parallel types */
                            parallelCount: number;
                            /** @description List of parallel variants in this set */
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                            id: string;
                            /** @description UUID of the release this set belongs to. Links to the release entity. A release typically contains multiple sets. */
                            releaseId: string;
                            /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                            name: string;
                            /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                            description?: string;
                            /** @description Name of the release */
                            releaseName: string;
                            /** @description Year of the release */
                            releaseYear: string;
                            /** @description Number of base cards */
                            cardCount: number;
                            /** @description Number of parallel types */
                            parallelCount: number;
                            /** @description List of parallel variants in this set */
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/sets/{id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cards within a set
         * @description Retrieve a paginated list of all base cards within a specific set. Cards can be filtered by player name or card number, and sorted by number or name. This endpoint returns only the base versions of cards, not their parallel variants. Use this for building set checklists, finding specific cards within a set, or displaying complete set contents. Each card includes its number, name, and basic information.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Search by card name (partial match) */
                    name?: string;
                    /** @description Filter by card number */
                    number?: string;
                    /** @description Field to sort by */
                    sort?: "number" | "name";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    /** @description Set UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/sets/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get random sets matching filters
         * @description Returns random sets instead of paginated sorted results. Useful for discovery features or showcasing catalog variety. Supports all standard set filters including release, year range, manufacturer, and name search. Each set includes its release context and card/parallel counts. If count exceeds available matching sets, returns all available sets.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter sets to a specific release. Must be a valid UUID. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    releaseId?: string;
                    /** @description Search sets by name using partial string matching. Case-insensitive. Example: "base" matches "Base Set", "Base Chrome", etc. */
                    name?: string;
                    /** @description Filter sets by exact release year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter sets from releases in this year onwards (inclusive). Example: "2020" returns sets from 2020, 2021, 2022 releases, etc. */
                    min_year?: string;
                    /** @description Filter sets from releases up to this year (inclusive). Example: "2022" returns sets from 2022 and earlier releases. */
                    max_year?: string;
                    /** @description Filter sets by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Filters through the release relationship. */
                    manufacturer?: string;
                    /** @description Field to sort results by. "name" sorts by set name, "year" sorts by release year then set name. */
                    sort?: "name" | "year";
                    /** @description Sort direction. "asc" for ascending, "desc" for descending. */
                    order?: "asc" | "desc";
                    /** @description Number of random sets to return. Minimum: 1, Maximum: 200, Default: 1. If fewer sets match filters, returns all available. */
                    count?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random sets matching the specified filters */
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                            }[];
                            /** @description Actual number of sets returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random sets matching the specified filters */
                            sets: {
                                /** @description Unique identifier for the set. Format: UUID v4. This ID is permanent and used for all API operations involving this set. */
                                id: string;
                                /** @description Name of the set within the release. Examples: "Base Set", "Rookie Autographs", "Legends". Describes the theme or type of cards in this set. */
                                name: string;
                                /** @description Additional details about the set, such as card count, special features, or checklist highlights. May be null. */
                                description?: string;
                                /** @description Number of base cards in this set */
                                cardCount: number;
                                /** @description Number of parallel types in this set */
                                parallelCount: number;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                            }[];
                            /** @description Actual number of sets returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search cards across entire catalog
         * @description Global search endpoint for finding base cards across all releases, sets, and manufacturers. Supports complex filtering by player name, card number, release, set, year range, manufacturer, and attributes. Results include card details with release and set information. This is the primary endpoint for card discovery, player collections, and cross-product searches. Use specific release or set endpoints for more focused searches.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Search cards by player/subject name using partial string matching. Case-insensitive. Example: "lebron" matches "LeBron James", "LeBron James Jr.", etc. */
                    name?: string;
                    /** @description Filter by exact card number. Example: "23" returns all cards numbered 23 across all sets. */
                    number?: string;
                    /** @description Filter cards to a specific release. Must be a valid UUID. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    releaseId?: string;
                    /** @description Filter cards by release name using partial string matching. Case-insensitive. Example: "chrome" matches cards from "Topps Chrome", "Bowman Chrome", etc. */
                    releaseName?: string;
                    /** @description Filter cards by exact release year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter cards from releases in this year onwards (inclusive). Example: "2020" returns cards from 2020, 2021, 2022 releases, etc. */
                    min_year?: string;
                    /** @description Filter cards from releases up to this year (inclusive). Example: "2022" returns cards from 2022 and earlier releases. */
                    max_year?: string;
                    /** @description Filter cards to a specific set. Must be a valid UUID. More specific than releaseId filter. */
                    setId?: string;
                    /** @description Filter cards by set name using partial string matching. Case-insensitive. Example: "rookie" matches cards from "Rated Rookies", "Rookie Stars", etc. */
                    setName?: string;
                    /** @description Filter cards by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Filters through the release relationship. */
                    manufacturer?: string;
                    /** @description Filter cards by attribute UUID. Returns only cards tagged with this specific attribute (e.g., Rookie Card, Autograph, etc.) */
                    attributeId?: string;
                    /** @description Filter cards by attribute short name/code. Example: "RC" for Rookie Cards, "AU" for Autographs. Case-sensitive. */
                    attributeShortName?: string;
                    /** @description Field to sort results by. "name" = player name, "release" = release name, "set" = set name, "year" = release year, "price-raw" = raw/ungraded card price (highest to lowest when desc). */
                    sort?: "name" | "release" | "set" | "year" | "price-raw";
                    /** @description Sort direction. "asc" for ascending (lowest to highest price), "desc" for descending (highest to lowest price). */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/cards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get complete card details
         * @description Retrieve comprehensive information about a specific card including its release, set, attributes, and available parallel variants. Returns full card details with contextual information about where it belongs in the catalog hierarchy. Includes a count of parallel versions available and all attributes (Rookie, Autograph, etc.) associated with the card. Use this endpoint for detailed card views, collection management, or when you need complete card information.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Card UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                            releaseId: string;
                            /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                            setId: string;
                            /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                            id: string;
                            /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                            number?: string;
                            /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                            name: string;
                            /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                            description?: string;
                            /** @description Name of the release */
                            releaseName?: string;
                            /** @description Year of the release */
                            releaseYear?: string;
                            /** @description Name of the set */
                            setName: string;
                            /** @description Limited print run number for this specific card */
                            numberedTo?: number;
                            /** @description Number of parallel variants for this card */
                            parallelCount: number;
                            /** @description List of parallel variants available for this card */
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            /** @description Array of attribute short names */
                            attributes?: string[];
                            /** @description Average pricing data for the base card. Only included when price data is available. Prices are averaged across all available sources. */
                            prices?: {
                                /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                raw?: string;
                                /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                "psa-10"?: string;
                                /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                "psa-9"?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                            releaseId: string;
                            /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                            setId: string;
                            /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                            id: string;
                            /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                            number?: string;
                            /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                            name: string;
                            /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                            description?: string;
                            /** @description Name of the release */
                            releaseName?: string;
                            /** @description Year of the release */
                            releaseYear?: string;
                            /** @description Name of the set */
                            setName: string;
                            /** @description Limited print run number for this specific card */
                            numberedTo?: number;
                            /** @description Number of parallel variants for this card */
                            parallelCount: number;
                            /** @description List of parallel variants available for this card */
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                            }[];
                            /** @description Array of attribute short names */
                            attributes?: string[];
                            /** @description Average pricing data for the base card. Only included when price data is available. Prices are averaged across all available sources. */
                            prices?: {
                                /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                raw?: string;
                                /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                "psa-10"?: string;
                                /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                "psa-9"?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/cards/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get random cards with optional parallel conversion
         * @description Simulates pack opening experience by returning random cards from the catalog. When includeParallels=true, each card has a weighted probability of converting to a parallel based on the parallel's numberedTo value. Parallels are checked from rarest to most common using a cascading algorithm where lower numbered parallels (e.g., 1/1) are significantly rarer than higher numbered ones (e.g., /999), and unlimited parallels are the most common. Supports comprehensive filtering by set, release, player name, year, manufacturer, and card attributes. Note: setId and releaseId filters are mutually exclusive.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search cards by player/subject name using partial string matching. Case-insensitive. Example: "lebron" matches "LeBron James", "LeBron James Jr.", etc. */
                    name?: string;
                    /** @description Filter by exact card number. Example: "23" returns all cards numbered 23 across all sets. */
                    number?: string;
                    /** @description Filter cards to a specific release. Must be a valid UUID. Example: "550e8400-e29b-41d4-a716-446655440000" */
                    releaseId?: string;
                    /** @description Filter cards by release name using partial string matching. Case-insensitive. Example: "chrome" matches cards from "Topps Chrome", "Bowman Chrome", etc. */
                    releaseName?: string;
                    /** @description Filter cards by exact release year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter cards from releases in this year onwards (inclusive). Example: "2020" returns cards from 2020, 2021, 2022 releases, etc. */
                    min_year?: string;
                    /** @description Filter cards from releases up to this year (inclusive). Example: "2022" returns cards from 2022 and earlier releases. */
                    max_year?: string;
                    /** @description Filter cards to a specific set. Must be a valid UUID. More specific than releaseId filter. */
                    setId?: string;
                    /** @description Filter cards by set name using partial string matching. Case-insensitive. Example: "rookie" matches cards from "Rated Rookies", "Rookie Stars", etc. */
                    setName?: string;
                    /** @description Filter cards by manufacturer. Accepts either a UUID or exact manufacturer name (e.g., "Topps", "Panini"). Filters through the release relationship. */
                    manufacturer?: string;
                    /** @description Filter cards by attribute UUID. Returns only cards tagged with this specific attribute (e.g., Rookie Card, Autograph, etc.) */
                    attributeId?: string;
                    /** @description Filter cards by attribute short name/code. Example: "RC" for Rookie Cards, "AU" for Autographs. Case-sensitive. */
                    attributeShortName?: string;
                    /** @description Field to sort results by. "name" = player name, "release" = release name, "set" = set name, "year" = release year, "price-raw" = raw/ungraded card price (highest to lowest when desc). */
                    sort?: "name" | "release" | "set" | "year" | "price-raw";
                    /** @description Sort direction. "asc" for ascending (lowest to highest price), "desc" for descending (highest to lowest price). */
                    order?: "asc" | "desc";
                    /** @description Number of random cards to return. Minimum: 1, Maximum: 200, Default: 1. If fewer cards match filters, returns all available. */
                    count?: number;
                    /** @description Enable parallel odds system. When true, each card has a weighted chance to convert to a parallel based on the parallel's numberedTo value. Lower numbered parallels (e.g., 1/1) are rarer than higher numbered ones (e.g., /999), and unlimited parallels are the most common. */
                    includeParallels?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random cards. When includeParallels=true, some cards may be converted to parallels based on weighted probability. */
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                                /** @description True if this card was converted to a parallel variant through the random odds system */
                                isParallel?: boolean;
                                /** @description UUID of the parallel type if this card is a parallel variant */
                                parallelId?: string;
                                /** @description Name of the parallel variant (e.g., "Gold Refractor", "Black Prizm 1/1") */
                                parallelName?: string;
                                /** @description Limited print run number for this parallel. Null for unlimited parallels. */
                                numberedTo?: number | null;
                            }[];
                            /** @description Actual number of cards returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of random cards. When includeParallels=true, some cards may be converted to parallels based on weighted probability. */
                            cards: {
                                /** @description UUID of the release this card belongs to. Provided for convenience to avoid additional lookups. */
                                releaseId: string;
                                /** @description UUID of the set this card belongs to. Links to the set entity. Determines which collection within the release contains this card. */
                                setId: string;
                                /** @description Unique identifier for the card. Format: UUID v4. This ID is permanent and used for all API operations involving this card. */
                                id: string;
                                /** @description Card number within the set. Examples: "23", "RC-15", "L-5". May include letters for special subsets. Null for unnumbered cards. */
                                number?: string;
                                /** @description Primary subject of the card. Usually a player name for sports cards (e.g., "Michael Jordan") or character/subject for non-sports. */
                                name: string;
                                /** @description Additional card details such as team, position, special notations, or card back information. May be null. */
                                description?: string;
                                /** @description Name of the set this card belongs to */
                                setName: string;
                                /** @description Name of the release */
                                releaseName?: string;
                                /** @description Year of the release */
                                releaseYear?: string;
                                /** @description Array of attribute short names */
                                attributes?: string[];
                                /** @description Average pricing data for the base card. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                                /** @description True if this card was converted to a parallel variant through the random odds system */
                                isParallel?: boolean;
                                /** @description UUID of the parallel type if this card is a parallel variant */
                                parallelId?: string;
                                /** @description Name of the parallel variant (e.g., "Gold Refractor", "Black Prizm 1/1") */
                                parallelName?: string;
                                /** @description Limited print run number for this parallel. Null for unlimited parallels. */
                                numberedTo?: number | null;
                            }[];
                            /** @description Actual number of cards returned. May be less than requested count if insufficient matches. */
                            count: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Browse and search Attributes with card counts
         * @description Browse and search Attributes with pagination and card count information
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Search attributes by full name using partial string matching. Case-insensitive. Example: "rookie" matches "Rookie Card", "Rookie Year", etc. */
                    name?: string;
                    /** @description Search attributes by short name/code using partial string matching. Case-insensitive. Example: "R" matches "RC" (Rookie Card), "RPA" (Rookie Patch Auto), etc. */
                    shortName?: string;
                    /** @description Field to sort results by. "name" = full name, "shortName" = abbreviation, "cardCount" = number of cards with this attribute. */
                    sort?: "name" | "shortName" | "cardCount";
                    /** @description Sort direction. "asc" for ascending (A-Z, lowest count first), "desc" for descending (Z-A, highest count first). */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            attributes: {
                                /** @description Unique identifier for the attribute. Format: UUID v4. This ID is permanent and used for all API operations involving this attribute. */
                                id: string;
                                /** @description Full descriptive name of the attribute. Examples: "Rookie Card", "Autograph", "Game-Used Memorabilia". Used for display purposes. */
                                name: string;
                                /** @description Abbreviated code for the attribute. Examples: "RC" (Rookie Card), "AU" (Autograph), "GU" (Game-Used). Used for compact display and filtering. */
                                shortName: string;
                                /** @description Detailed explanation of what this attribute represents, when it applies, or any special notes. May be null. */
                                description?: string;
                                /** @description Number of cards with this attribute */
                                cardCount: number;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            attributes: {
                                /** @description Unique identifier for the attribute. Format: UUID v4. This ID is permanent and used for all API operations involving this attribute. */
                                id: string;
                                /** @description Full descriptive name of the attribute. Examples: "Rookie Card", "Autograph", "Game-Used Memorabilia". Used for display purposes. */
                                name: string;
                                /** @description Abbreviated code for the attribute. Examples: "RC" (Rookie Card), "AU" (Autograph), "GU" (Game-Used). Used for compact display and filtering. */
                                shortName: string;
                                /** @description Detailed explanation of what this attribute represents, when it applies, or any special notes. May be null. */
                                description?: string;
                                /** @description Number of cards with this attribute */
                                cardCount: number;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/attributes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed information about a specific Attribute
         * @description Get detailed information about a specific Attribute including card count
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Attribute UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the attribute. Format: UUID v4. This ID is permanent and used for all API operations involving this attribute. */
                            id: string;
                            /** @description Full descriptive name of the attribute. Examples: "Rookie Card", "Autograph", "Game-Used Memorabilia". Used for display purposes. */
                            name: string;
                            /** @description Abbreviated code for the attribute. Examples: "RC" (Rookie Card), "AU" (Autograph), "GU" (Game-Used). Used for compact display and filtering. */
                            shortName: string;
                            /** @description Detailed explanation of what this attribute represents, when it applies, or any special notes. May be null. */
                            description?: string;
                            /** @description Number of cards with this attribute */
                            cardCount: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the attribute. Format: UUID v4. This ID is permanent and used for all API operations involving this attribute. */
                            id: string;
                            /** @description Full descriptive name of the attribute. Examples: "Rookie Card", "Autograph", "Game-Used Memorabilia". Used for display purposes. */
                            name: string;
                            /** @description Abbreviated code for the attribute. Examples: "RC" (Rookie Card), "AU" (Autograph), "GU" (Game-Used). Used for compact display and filtering. */
                            shortName: string;
                            /** @description Detailed explanation of what this attribute represents, when it applies, or any special notes. May be null. */
                            description?: string;
                            /** @description Number of cards with this attribute */
                            cardCount: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/catalog/parallels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for parallels across sets and releases
         * @description Search for parallels by name and filter by release. Returns all sets containing the parallel with release information
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Search parallels by name using partial string matching. Case-insensitive. Example: "gold" matches "Gold Refractor", "Gold Prizm", etc. */
                    name?: string;
                    /** @description Filter parallels to a specific release. Must be a valid UUID. Returns all parallel types across all sets in the release. */
                    releaseId?: string;
                    /** @description Filter parallels by release name using partial string matching. Case-insensitive. Example: "prizm" matches parallels from "Prizm Basketball", "Prizm Football", etc. */
                    releaseName?: string;
                    /** @description Filter parallels by exact release year (e.g., "2023"). When specified, overrides min_year and max_year parameters. */
                    year?: string;
                    /** @description Filter parallels from releases in this year onwards (inclusive). Example: "2020" returns parallels from 2020, 2021, 2022 releases, etc. */
                    min_year?: string;
                    /** @description Filter parallels from releases up to this year (inclusive). Example: "2022" returns parallels from 2022 and earlier releases. */
                    max_year?: string;
                    /** @description Field to sort results by. "name" = parallel name, "release" = release name, "set" = set name, "year" = release year. */
                    sort?: "name" | "release" | "set" | "year";
                    /** @description Sort direction. "asc" for ascending, "desc" for descending. */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                                /** @description Set UUID */
                                setId: string;
                                /** @description Set name */
                                setName: string;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                                /** @description Number of base cards in the set */
                                cardCount: number;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            parallels: {
                                /** @description Unique identifier for the parallel type. Format: UUID v4. This ID represents the parallel variant, not individual cards. */
                                id: string;
                                /** @description Name of the parallel variant. Examples: "Gold Refractor", "Black Prizm", "Orange". Describes the visual variant or rarity tier. */
                                name: string;
                                /** @description Additional details about the parallel such as print run, special features, or visual description. May be null. */
                                description?: string;
                                /** @description Limited print run number for this parallel */
                                numberedTo?: number;
                                /** @description Average pricing data for this parallel variant. Only included when price data is available. */
                                prices?: {
                                    /** @description Average price for ungraded/raw condition cards. Format: USD with 2 decimal places (e.g., "10.00", "5.50") */
                                    raw?: string;
                                    /** @description Average price for PSA 10 (Gem Mint) graded cards. Format: USD with 2 decimal places (e.g., "100.00", "75.25") */
                                    "psa-10"?: string;
                                    /** @description Average price for PSA 9 (Mint) graded cards. Format: USD with 2 decimal places (e.g., "50.00", "35.75") */
                                    "psa-9"?: string;
                                };
                                /** @description Set UUID */
                                setId: string;
                                /** @description Set name */
                                setName: string;
                                /** @description Release UUID */
                                releaseId: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                                /** @description Number of base cards in the set */
                                cardCount: number;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Segment name autocomplete
         * @description Get segment name suggestions for autocomplete. Returns up to 10 matching segment names sorted alphabetically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/manufacturers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Manufacturer name autocomplete
         * @description Get manufacturer name suggestions for autocomplete. Can filter by segment. Returns up to 10 matching manufacturer names sorted alphabetically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                    /** @description Filter manufacturers by segment UUID */
                    segmentId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/years": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Year autocomplete
         * @description Get year suggestions for autocomplete. Can filter by segment and/or manufacturer. Returns up to 10 matching years sorted chronologically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                    /** @description Filter years by segment UUID */
                    segmentId?: string;
                    /** @description Filter years by manufacturer UUID */
                    manufacturerId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/releases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Release name autocomplete
         * @description Get release name suggestions for autocomplete. Can filter by segment, manufacturer, and/or year. Returns up to 10 matching release names sorted alphabetically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                    /** @description Filter releases by segment UUID */
                    segmentId?: string;
                    /** @description Filter releases by manufacturer UUID */
                    manufacturerId?: string;
                    /** @description Filter releases by year (e.g., "2023") */
                    year?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Set name autocomplete
         * @description Get set name suggestions for autocomplete. Can filter by release, or broader filters like segment, manufacturer, and year. Returns up to 10 matching set names sorted alphabetically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                    /** @description Filter sets by release UUID */
                    releaseId?: string;
                    /** @description Filter sets by segment UUID (when releaseId not provided) */
                    segmentId?: string;
                    /** @description Filter sets by manufacturer UUID (when releaseId not provided) */
                    manufacturerId?: string;
                    /** @description Filter sets by year (when releaseId not provided) */
                    year?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/autocomplete/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Card name autocomplete
         * @description Get card name suggestions for autocomplete. Can filter by set, release, or broader filters. Returns up to 10 unique card names sorted alphabetically.
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query string. Minimum 1 character for autocomplete suggestions. */
                    q: string;
                    /** @description Filter cards by set UUID */
                    setId?: string;
                    /** @description Filter cards by release UUID (when setId not provided) */
                    releaseId?: string;
                    /** @description Filter cards by segment UUID (for broader search) */
                    segmentId?: string;
                    /** @description Filter cards by manufacturer UUID (for broader search) */
                    manufacturerId?: string;
                    /** @description Filter cards by year (for broader search) */
                    year?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of autocomplete suggestions, maximum 10 items, sorted alphabetically */
                            suggestions: string[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collectors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all collectors
         * @description Get all collectors for the authenticated client with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collectors: {
                                /** @description Unique identifier for the collector */
                                id: string;
                                /** @description Name of the collector (e.g., "Mike", "Eric") */
                                name?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collectors: {
                                /** @description Unique identifier for the collector */
                                id: string;
                                /** @description Name of the collector (e.g., "Mike", "Eric") */
                                name?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new collector
         * @description Create a new collector for the authenticated client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the collector (e.g., "Mike", "Eric") */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collectors/{collectorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific collector
         * @description Get details of a specific collector by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collector UUID */
                    collectorId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        /**
         * Update a collector
         * @description Update a specific collector by ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collector UUID */
                    collectorId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the collector (e.g., "Mike", "Eric") */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collector */
                            id: string;
                            /** @description Name of the collector (e.g., "Mike", "Eric") */
                            name?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a collector
         * @description Delete a specific collector by ID. This will also delete all associated collections.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collector UUID */
                    collectorId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all collections
         * @description Retrieve a paginated list of all collections across all collectors for your account.
         *
         *     **Query Parameters:**
         *     - **page**: Page number (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **collectorId**: Filter by specific collector (optional)
         *     - **type**: Filter by collection type (personal, wishlist, for_sale, showcase)
         *     - **isPublic**: Filter by privacy setting (true/false)
         *
         *     **Response includes:**
         *     - Collection metadata (name, type, privacy, dates)
         *     - Associated collector information
         *     - Card count per collection
         *     - Total value estimates (if applicable)
         *     - Pagination metadata
         *
         *     **Use Cases:**
         *     - Display all collections in a dashboard
         *     - Filter collections by type or collector
         *     - Implement collection browsing with pagination
         *     - Generate collection statistics
         *
         *     **Performance Notes:**
         *     - Results are cached for improved performance
         *     - Large result sets are automatically paginated
         *     - Only returns collections owned by your API key
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter by collector UUID */
                    collectorId?: string;
                    /** @description Search by collection name (partial match) */
                    name?: string;
                    /** @description Field to sort by */
                    sort?: "name";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collections: {
                                /** @description Unique identifier for the collection */
                                id: string;
                                /** @description ID of the collector who owns this collection */
                                collectorId: string;
                                /** @description Name of the collection */
                                name?: string;
                                /** @description Description of the collection */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collections: {
                                /** @description Unique identifier for the collection */
                                id: string;
                                /** @description ID of the collector who owns this collection */
                                collectorId: string;
                                /** @description Name of the collection */
                                name?: string;
                                /** @description Description of the collection */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new collection
         * @description Create a new collection for organizing trading cards.
         *
         *     A collection is a container for organizing cards, similar to a physical binder or box. Each collection belongs to a specific collector and can be customized with:
         *     - A descriptive name
         *     - Type designation (personal, wishlist, for_sale, showcase)
         *     - Privacy settings (public or private)
         *     - Optional description
         *
         *     **Use Cases:**
         *     - Organize cards by theme (e.g., "1990s Rookies", "Hall of Famers")
         *     - Track different collection goals (wishlist vs owned)
         *     - Separate cards for sale from personal collection
         *     - Create showcases of prized cards
         *
         *     **Important Notes:**
         *     - Collections are isolated by API key (multi-tenant)
         *     - Each collector can have multiple collections
         *     - Collection names must be unique per collector
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the collector who will own this collection
                         */
                        collectorId: string;
                        /** @description Name of the collection */
                        name?: string;
                        /** @description Description of the collection */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection details
         * @description Retrieve detailed information about a specific collection.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to retrieve
         *
         *     **Response includes:**
         *     - Complete collection metadata
         *     - Collector information
         *     - Creation and update timestamps
         *     - Card count and value statistics
         *     - Collection type and privacy settings
         *
         *     **Security:**
         *     - Only collections owned by your API key can be accessed
         *     - Attempting to access another client's collection returns 404
         *
         *     **Use Cases:**
         *     - Display collection details page
         *     - Load collection for editing
         *     - Verify collection settings
         *     - Get collection statistics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        /**
         * Update collection
         * @description Update an existing collection's properties.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to update
         *
         *     **Updatable Fields:**
         *     - **name**: New collection name (must be unique per collector)
         *     - **description**: Updated description text
         *     - **type**: Change collection type (personal, wishlist, for_sale, showcase)
         *     - **isPublic**: Toggle privacy setting
         *
         *     **Important Notes:**
         *     - Only the collection owner can update it
         *     - Collection ID and collector cannot be changed
         *     - Name must remain unique within the collector's collections
         *     - Changes are immediately reflected in all queries
         *
         *     **Use Cases:**
         *     - Rename a collection
         *     - Change collection visibility
         *     - Update collection purpose (e.g., personal to for_sale)
         *     - Add or modify description
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the collection */
                        name?: string;
                        /** @description Description of the collection */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the collection */
                            id: string;
                            /** @description ID of the collector who owns this collection */
                            collectorId: string;
                            /** @description Name of the collection */
                            name?: string;
                            /** @description Description of the collection */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete collection
         * @description Permanently delete a collection and all associated data.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to delete
         *
         *     **⚠️ WARNING:**
         *     - This action is **irreversible**
         *     - All cards in the collection will be removed
         *     - All binders associated with the collection will be deleted
         *     - Collection statistics and history will be permanently lost
         *
         *     **Security:**
         *     - Only the collection owner can delete it
         *     - Returns 404 if collection doesn't exist or belongs to another client
         *
         *     **Response:**
         *     - 204 No Content on successful deletion
         *     - No response body is returned
         *
         *     **Use Cases:**
         *     - Remove obsolete collections
         *     - Clean up test collections
         *     - Consolidate multiple collections
         *     - Account cleanup before deletion
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/breakdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Analyze collection breakdown
         * @description Analyze your collection by different dimensions to identify concentration risks and opportunities.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to analyze
         *
         *     **Query Parameters:**
         *     - **groupBy**: Dimension to analyze (release, year, grade, player, manufacturer)
         *     - **sortBy**: Sort groups by count, value, roi, or percentage (default: value)
         *     - **order**: Sort order - asc or desc (default: desc)
         *     - **page**: Page number for pagination (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **minCount**: Filter groups with minimum card count
         *     - **minValue**: Filter groups with minimum total value
         *
         *     **Response includes:**
         *     - **Summary statistics**: Total groups, cards, value, ROI, best performers
         *     - **Group breakdowns**: Each group with metrics and top cards
         *     - **Pagination metadata**: For large result sets
         *
         *     **Analysis Dimensions:**
         *     - **release**: Group by product release (e.g., "1989 Topps", "2023 Prizm") to see release concentration
         *     - **year**: Group by release year to see temporal distribution
         *     - **grade**: Group by grade to analyze condition distribution
         *     - **player**: Group by player to see player concentration
         *     - **manufacturer**: Group by card manufacturer
         *
         *     **Metrics per Group:**
         *     - Card count and unique card count
         *     - Total and average values
         *     - Return on investment (ROI)
         *     - Percentage of total collection
         *     - Top 5 most valuable cards
         *
         *     **Use Cases:**
         *     - Identify overconcentration in specific releases or players
         *     - Find best performing segments by ROI
         *     - Analyze grade distribution for grading decisions
         *     - Discover diversification opportunities
         *     - Portfolio risk assessment
         */
        get: {
            parameters: {
                query: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Dimension to group the collection by */
                    groupBy: "release" | "year" | "grade" | "player" | "manufacturer";
                    /** @description Metric to sort groups by */
                    sortBy?: "count" | "value" | "roi" | "percentage";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                    /** @description Minimum card count to include in results */
                    minCount?: number;
                    /** @description Minimum total value to include in results */
                    minValue?: string;
                };
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: {
                                /** @description Total number of groups */
                                totalGroups: number;
                                /** @description Total number of cards in collection */
                                totalCards: number;
                                /** @description Total quantity including duplicates */
                                totalQuantity: number;
                                /** @description Total collection value */
                                totalValue?: string;
                                /** @description Total amount invested */
                                totalInvested?: string;
                                /** @description Overall ROI percentage */
                                overallRoi?: number;
                                /** @description The dimension used for grouping */
                                groupedBy: string;
                                mostValuableGroup?: {
                                    /** @description Name of most valuable group */
                                    name: string;
                                    /** @description Total value of the group */
                                    value: string;
                                };
                                bestPerformingGroup?: {
                                    /** @description Name of best performing group */
                                    name: string;
                                    /** @description ROI percentage */
                                    roi: number;
                                };
                            };
                            groups: {
                                /** @description The grouping key (e.g., set name, year, grade) */
                                groupKey: string;
                                /** @description The UUID of the group entity if applicable */
                                groupId?: string;
                                /** @description Number of cards in this group */
                                cardCount: number;
                                /** @description Number of unique cards (ignoring duplicates) */
                                uniqueCardCount: number;
                                /** @description Total quantity including duplicates */
                                totalQuantity: number;
                                /** @description Total purchase price for cards in group */
                                totalBuyPrice?: string;
                                /** @description Total current market value */
                                totalCurrentValue?: string;
                                /** @description Total sold price for sold cards */
                                totalSoldPrice?: string;
                                /** @description Average purchase price per card */
                                averageBuyPrice?: string;
                                /** @description Average current value per card */
                                averageCurrentValue?: string;
                                /** @description Return on investment percentage */
                                roi?: number;
                                /** @description Percentage this group represents of total collection */
                                percentageOfCollection: number;
                                /** @description Top 5 most valuable cards in this group */
                                topCards?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Set name */
                                    setName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Purchase price per card */
                                    buyPrice?: string;
                                    /** @description Current market value per card */
                                    currentValue?: string;
                                    /** @description Quantity in collection */
                                    quantity: number;
                                }[];
                            }[];
                            pagination: {
                                total_count: number;
                                skip: number;
                                take: number;
                                page: number;
                                pages: number;
                            };
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: {
                                /** @description Total number of groups */
                                totalGroups: number;
                                /** @description Total number of cards in collection */
                                totalCards: number;
                                /** @description Total quantity including duplicates */
                                totalQuantity: number;
                                /** @description Total collection value */
                                totalValue?: string;
                                /** @description Total amount invested */
                                totalInvested?: string;
                                /** @description Overall ROI percentage */
                                overallRoi?: number;
                                /** @description The dimension used for grouping */
                                groupedBy: string;
                                mostValuableGroup?: {
                                    /** @description Name of most valuable group */
                                    name: string;
                                    /** @description Total value of the group */
                                    value: string;
                                };
                                bestPerformingGroup?: {
                                    /** @description Name of best performing group */
                                    name: string;
                                    /** @description ROI percentage */
                                    roi: number;
                                };
                            };
                            groups: {
                                /** @description The grouping key (e.g., set name, year, grade) */
                                groupKey: string;
                                /** @description The UUID of the group entity if applicable */
                                groupId?: string;
                                /** @description Number of cards in this group */
                                cardCount: number;
                                /** @description Number of unique cards (ignoring duplicates) */
                                uniqueCardCount: number;
                                /** @description Total quantity including duplicates */
                                totalQuantity: number;
                                /** @description Total purchase price for cards in group */
                                totalBuyPrice?: string;
                                /** @description Total current market value */
                                totalCurrentValue?: string;
                                /** @description Total sold price for sold cards */
                                totalSoldPrice?: string;
                                /** @description Average purchase price per card */
                                averageBuyPrice?: string;
                                /** @description Average current value per card */
                                averageCurrentValue?: string;
                                /** @description Return on investment percentage */
                                roi?: number;
                                /** @description Percentage this group represents of total collection */
                                percentageOfCollection: number;
                                /** @description Top 5 most valuable cards in this group */
                                topCards?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Set name */
                                    setName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Purchase price per card */
                                    buyPrice?: string;
                                    /** @description Current market value per card */
                                    currentValue?: string;
                                    /** @description Quantity in collection */
                                    quantity: number;
                                }[];
                            }[];
                            pagination: {
                                total_count: number;
                                skip: number;
                                take: number;
                                page: number;
                                pages: number;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection analytics
         * @description Retrieve comprehensive analytics about collection performance and composition.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to analyze
         *
         *     **Response includes:**
         *
         *     **Overview:**
         *     - Total cards, unique cards, and quantities
         *     - Basic collection composition stats
         *
         *     **Financials:**
         *     - Total invested (sum of all buy prices)
         *     - Current market value (based on latest market prices)
         *     - Total realized gains (profit/loss from sold cards)
         *     - Total unrealized gains (current value vs buy price for unsold cards)
         *     - Overall ROI percentage
         *     - Realized ROI (performance on sold cards only)
         *
         *     **Composition:**
         *     - Graded vs raw card counts and percentages
         *     - Cards listed for sale
         *     - Cards already sold
         *
         *     **Performance:**
         *     - Average card value
         *     - Average ROI across portfolio
         *     - Top gainer by percentage
         *     - Most valuable card by current market price
         *
         *     **Use Cases:**
         *     - Portfolio performance dashboard
         *     - Investment tracking
         *     - Tax reporting (realized vs unrealized gains)
         *     - Collection valuation
         *     - Performance benchmarking
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            overview: {
                                /** @description Total number of card entries in collection */
                                totalCards: number;
                                /** @description Number of unique cards (ignoring duplicates) */
                                uniqueCards: number;
                                /** @description Total quantity including all duplicates */
                                totalQuantity: number;
                            };
                            financials: {
                                /** @description Total amount invested (sum of buy prices) */
                                totalInvested?: string;
                                /** @description Current total market value */
                                currentMarketValue?: string;
                                /** @description Total gains from sold cards */
                                totalRealizedGains?: string;
                                /** @description Unrealized gains on unsold cards */
                                totalUnrealizedGains?: string;
                                /** @description Overall return on investment percentage */
                                overallROI?: number;
                                /** @description ROI on sold cards only */
                                realizedROI?: number;
                            };
                            composition: {
                                /** @description Number of graded cards */
                                gradedCount: number;
                                /** @description Number of raw (ungraded) cards */
                                rawCount: number;
                                /** @description Percentage of collection that is graded */
                                gradedPercentage: number;
                                /** @description Number of cards listed for sale */
                                forSaleCount: number;
                                /** @description Number of cards that have been sold */
                                soldCount: number;
                            };
                            performance: {
                                /** @description Average current value per card */
                                averageCardValue?: string;
                                /** @description Average ROI across all cards with buy prices */
                                averageROI?: number;
                                /** @description Card with highest percentage gain */
                                topGainer?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Purchase price */
                                    buyPrice: string;
                                    /** @description Current market value */
                                    currentValue: string;
                                    /** @description Dollar gain amount */
                                    gain: string;
                                    /** @description Percentage gain */
                                    gainPercentage: number;
                                };
                                /** @description Most valuable card by current market price */
                                topValue?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Current market value */
                                    currentValue: string;
                                    /** @description Quantity owned */
                                    quantity: number;
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            overview: {
                                /** @description Total number of card entries in collection */
                                totalCards: number;
                                /** @description Number of unique cards (ignoring duplicates) */
                                uniqueCards: number;
                                /** @description Total quantity including all duplicates */
                                totalQuantity: number;
                            };
                            financials: {
                                /** @description Total amount invested (sum of buy prices) */
                                totalInvested?: string;
                                /** @description Current total market value */
                                currentMarketValue?: string;
                                /** @description Total gains from sold cards */
                                totalRealizedGains?: string;
                                /** @description Unrealized gains on unsold cards */
                                totalUnrealizedGains?: string;
                                /** @description Overall return on investment percentage */
                                overallROI?: number;
                                /** @description ROI on sold cards only */
                                realizedROI?: number;
                            };
                            composition: {
                                /** @description Number of graded cards */
                                gradedCount: number;
                                /** @description Number of raw (ungraded) cards */
                                rawCount: number;
                                /** @description Percentage of collection that is graded */
                                gradedPercentage: number;
                                /** @description Number of cards listed for sale */
                                forSaleCount: number;
                                /** @description Number of cards that have been sold */
                                soldCount: number;
                            };
                            performance: {
                                /** @description Average current value per card */
                                averageCardValue?: string;
                                /** @description Average ROI across all cards with buy prices */
                                averageROI?: number;
                                /** @description Card with highest percentage gain */
                                topGainer?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Purchase price */
                                    buyPrice: string;
                                    /** @description Current market value */
                                    currentValue: string;
                                    /** @description Dollar gain amount */
                                    gain: string;
                                    /** @description Percentage gain */
                                    gainPercentage: number;
                                };
                                /** @description Most valuable card by current market price */
                                topValue?: {
                                    /** @description Card UUID */
                                    cardId: string;
                                    /** @description Card name */
                                    cardName: string;
                                    /** @description Release name */
                                    releaseName: string;
                                    /** @description Release year */
                                    releaseYear: string;
                                    /** @description Current market value */
                                    currentValue: string;
                                    /** @description Quantity owned */
                                    quantity: number;
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/set-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track set completion progress
         * @description Track progress toward completing sets within your collection to focus acquisition efforts.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to analyze
         *
         *     **Query Parameters:**
         *     - **sortBy**: Sort sets by completion, missing, cost, or difficulty (default: completion)
         *     - **order**: Sort order - asc or desc (default: desc)
         *     - **page**: Page number for pagination (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **minCompletion**: Filter sets with minimum completion percentage (0-100)
         *     - **nearComplete**: Filter for sets >80% complete (boolean)
         *
         *     **Response includes:**
         *
         *     **Summary statistics:**
         *     - Total sets represented in collection
         *     - Number of near-complete sets (>80%)
         *     - Number of fully complete sets (100%)
         *     - Total estimated cost to complete all sets
         *
         *     **Per Set:**
         *     - Set name, release name, and release year for context
         *     - Total cards in set vs owned cards
         *     - Completion percentage
         *     - Missing card UUIDs (only included for sets >= 85% complete; empty array otherwise)
         *     - Estimated cost to complete (based on raw card market prices)
         *     - Difficulty score (based on card availability)
         *
         *     **Use Cases:**
         *     - Identify which sets are close to completion
         *     - Calculate cost to complete specific sets
         *     - Focus buying decisions on near-complete sets
         *     - Track collection completion goals
         *     - Discover sets worth completing for investment
         *
         *     **Important Notes:**
         *     - Only base cards are considered (parallels excluded)
         *     - Estimated costs based on raw (ungraded) card prices
         *     - Missing card UUIDs only returned for sets >= 85% complete (to avoid multi-thousand line responses)
         *     - For sets < 85% complete, use totalCards - ownedCards to get missing count
         *     - Sorted by completion percentage (highest first) by default
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Metric to sort sets by */
                    sortBy?: "completion" | "missing" | "cost" | "difficulty";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                    /** @description Filter sets with minimum completion percentage */
                    minCompletion?: number;
                    /** @description Filter for sets >80% complete */
                    nearComplete?: boolean;
                };
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: {
                                /** @description Total number of sets represented in collection */
                                totalSets: number;
                                /** @description Number of sets >80% complete */
                                nearCompleteSets: number;
                                /** @description Number of fully complete sets */
                                fullyCompleteSets: number;
                                /** @description Total cost to complete all sets */
                                totalEstimatedCost?: string;
                            };
                            sets: {
                                /** @description Set UUID */
                                setId: string;
                                /** @description Set name */
                                setName: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                                /** @description Total number of cards in set */
                                totalCards: number;
                                /** @description Number of unique cards owned */
                                ownedCards: number;
                                /** @description Array of missing card UUIDs */
                                missingCards: string[];
                                /** @description Percentage complete (0-100) */
                                completionPercentage: number;
                                /** @description Estimated cost to acquire missing cards */
                                estimatedCostToComplete?: string;
                                /** @description Difficulty score based on card availability (0-100) */
                                difficultyScore?: number;
                                /** @description Average value per card in set */
                                averageCardValue?: string;
                            }[];
                            /** @description Total number of sets matching filters */
                            total_count: number;
                            /** @description Number of records skipped */
                            skip: number;
                            /** @description Number of records returned */
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: {
                                /** @description Total number of sets represented in collection */
                                totalSets: number;
                                /** @description Number of sets >80% complete */
                                nearCompleteSets: number;
                                /** @description Number of fully complete sets */
                                fullyCompleteSets: number;
                                /** @description Total cost to complete all sets */
                                totalEstimatedCost?: string;
                            };
                            sets: {
                                /** @description Set UUID */
                                setId: string;
                                /** @description Set name */
                                setName: string;
                                /** @description Release name */
                                releaseName: string;
                                /** @description Release year */
                                releaseYear: string;
                                /** @description Total number of cards in set */
                                totalCards: number;
                                /** @description Number of unique cards owned */
                                ownedCards: number;
                                /** @description Array of missing card UUIDs */
                                missingCards: string[];
                                /** @description Percentage complete (0-100) */
                                completionPercentage: number;
                                /** @description Estimated cost to acquire missing cards */
                                estimatedCostToComplete?: string;
                                /** @description Difficulty score based on card availability (0-100) */
                                difficultyScore?: number;
                                /** @description Average value per card in set */
                                averageCardValue?: string;
                            }[];
                            /** @description Total number of sets matching filters */
                            total_count: number;
                            /** @description Number of records skipped */
                            skip: number;
                            /** @description Number of records returned */
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/set-progress/{setId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get completion progress for specific set
         * @description Get detailed completion progress for a specific set within your collection.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection
         *     - **setId**: UUID of the set to check progress for
         *
         *     **Response includes:**
         *     - Set name, release name, and release year
         *     - Total cards in set vs owned cards
         *     - Completion percentage (0-100)
         *     - Array of missing card UUIDs
         *     - Estimated cost to complete set
         *     - Difficulty score (based on card availability)
         *     - Average card value for the set
         *
         *     **Use Cases:**
         *     - Check progress on a specific set
         *     - Get list of missing cards for targeted purchasing
         *     - Calculate exact cost to complete a set
         *     - Track progress toward set completion goal
         *     - Identify which cards are still needed
         *
         *     **Important Notes:**
         *     - Only base cards are considered (parallels excluded)
         *     - Estimated cost based on raw (ungraded) card prices
         *     - Missing cards returned as UUIDs for easy card lookup
         *     - Returns 404 if set is not represented in collection
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionId: string;
                    setId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Set UUID */
                            setId: string;
                            /** @description Set name */
                            setName: string;
                            /** @description Release name */
                            releaseName: string;
                            /** @description Release year */
                            releaseYear: string;
                            /** @description Total number of cards in set */
                            totalCards: number;
                            /** @description Number of unique cards owned */
                            ownedCards: number;
                            /** @description Array of missing card UUIDs */
                            missingCards: string[];
                            /** @description Percentage complete (0-100) */
                            completionPercentage: number;
                            /** @description Estimated cost to acquire missing cards */
                            estimatedCostToComplete?: string;
                            /** @description Difficulty score based on card availability (0-100) */
                            difficultyScore?: number;
                            /** @description Average value per card in set */
                            averageCardValue?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Set UUID */
                            setId: string;
                            /** @description Set name */
                            setName: string;
                            /** @description Release name */
                            releaseName: string;
                            /** @description Release year */
                            releaseYear: string;
                            /** @description Total number of cards in set */
                            totalCards: number;
                            /** @description Number of unique cards owned */
                            ownedCards: number;
                            /** @description Array of missing card UUIDs */
                            missingCards: string[];
                            /** @description Percentage complete (0-100) */
                            completionPercentage: number;
                            /** @description Estimated cost to acquire missing cards */
                            estimatedCostToComplete?: string;
                            /** @description Difficulty score based on card availability (0-100) */
                            difficultyScore?: number;
                            /** @description Average value per card in set */
                            averageCardValue?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/set-progress/{setId}/{parallelId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track parallel completion within a set
         * @description Track progress toward completing a specific parallel variant within a set.
         *
         *     This endpoint tracks completion for a specific parallel (e.g., all Refractors, all Gold parallels) within a set. Unlike the base set progress endpoint which counts any parallel as complete, this endpoint only counts cards where you own the specific parallel variant.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection to analyze
         *     - **setId**: UUID of the set to check progress for
         *     - **parallelId**: UUID of the specific parallel variant (e.g., Refractor, Gold, Silver, Prizm, etc.)
         *
         *     **Response includes:**
         *     - Set name, release name, and release year for context
         *     - Parallel name (e.g., "Refractor", "Gold Prizm")
         *     - Total cards in set vs owned cards of this specific parallel
         *     - Completion percentage for this parallel variant (0-100)
         *     - Array of missing card UUIDs for this parallel (for targeted buying)
         *     - Estimated cost to complete this parallel variant (based on raw card prices)
         *     - Average card value for this parallel
         *
         *     **How it differs from base set progress:**
         *     - **Base set progress** (/set-progress/:setId): Counts card #5 as owned if you have ANY parallel (base, refractor, gold, etc.)
         *     - **Parallel set progress** (this endpoint): Only counts card #5 if you own it as THIS specific parallel
         *
         *     **Use Cases:**
         *     - Track completion of premium parallel sets (Refractors, numbered parallels)
         *     - Calculate exact cost to complete a specific parallel run
         *     - Focus buying decisions on specific parallel variants
         *     - Chase rare parallel variations (e.g., Gold /10, Orange /25)
         *     - Investment tracking for high-value parallels
         *     - Set collection goals for parallel variants
         *
         *     **Example Scenario:**
         *     You're collecting all Refractor parallels from 2023 Prizm Basketball Base Set. You own 187 of 250 Refractors. This endpoint returns:
         *     - 74.8% complete
         *     - List of 63 missing Refractor card UUIDs
         *     - Estimated $1,247.50 to complete the Refractor parallel set
         *
         *     **Important Notes:**
         *     - Only base cards are considered (card variations where baseCardId IS NOT NULL are excluded)
         *     - Filters collection_cards by the specific parallelId provided
         *     - Estimated costs are based on raw (ungraded) card prices for this parallel
         *     - Returns 404 if parallel doesn't belong to the specified set
         *     - Missing cards are returned as UUIDs for easy lookup via the catalog API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionId: string;
                    setId: string;
                    parallelId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Set UUID */
                            setId: string;
                            /** @description Set name */
                            setName: string;
                            /** @description Release name */
                            releaseName: string;
                            /** @description Release year */
                            releaseYear: string;
                            /** @description Parallel UUID */
                            parallelId: string;
                            /** @description Parallel name (e.g., Refractor, Gold) */
                            parallelName: string;
                            /** @description Total number of cards in set */
                            totalCards: number;
                            /** @description Number of this parallel owned */
                            ownedCards: number;
                            /** @description Array of missing card UUIDs for this parallel */
                            missingCards: string[];
                            /** @description Percentage complete for this parallel (0-100) */
                            completionPercentage: number;
                            /** @description Estimated cost to acquire missing cards of this parallel */
                            estimatedCostToComplete?: string;
                            /** @description Average value per card for this parallel */
                            averageCardValue?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Set UUID */
                            setId: string;
                            /** @description Set name */
                            setName: string;
                            /** @description Release name */
                            releaseName: string;
                            /** @description Release year */
                            releaseYear: string;
                            /** @description Parallel UUID */
                            parallelId: string;
                            /** @description Parallel name (e.g., Refractor, Gold) */
                            parallelName: string;
                            /** @description Total number of cards in set */
                            totalCards: number;
                            /** @description Number of this parallel owned */
                            ownedCards: number;
                            /** @description Array of missing card UUIDs for this parallel */
                            missingCards: string[];
                            /** @description Percentage complete for this parallel (0-100) */
                            completionPercentage: number;
                            /** @description Estimated cost to acquire missing cards of this parallel */
                            estimatedCostToComplete?: string;
                            /** @description Average value per card for this parallel */
                            averageCardValue?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List collection cards
         * @description Retrieve a paginated list of all cards in a specific collection with advanced filtering options.
         *
         *     **Query Parameters:**
         *     - **page**: Page number (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **sortBy**: Sort field (name, number, value, purchaseDate, addedDate)
         *     - **sortOrder**: asc or desc (default: asc)
         *     - **search**: Search card names and descriptions
         *     - **binderId**: Filter by specific binder
         *     - **graded**: Filter graded cards only (true/false)
         *     - **forSale**: Filter cards marked for sale
         *     - **minValue**: Minimum current value filter
         *     - **maxValue**: Maximum current value filter
         *
         *     **Response includes:**
         *     - Full card catalog details (name, set, year, etc.)
         *     - Collection-specific metadata (quantity, grade, purchase info)
         *     - Current market values
         *     - Aggregated statistics (total value, card count)
         *     - Pagination metadata
         *
         *     **Use Cases:**
         *     - Browse collection inventory
         *     - Search for specific cards
         *     - Filter high-value cards
         *     - Export collection data
         *     - Generate collection reports
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter by card UUID */
                    cardId?: string;
                    /** @description Filter by parallel UUID */
                    parallelId?: string;
                    /** @description Filter by grade UUID */
                    gradeId?: string;
                    /** @description Filter by sold status (true for sold, false for not sold) */
                    hasSold?: boolean;
                    /** @description Field to sort by */
                    sort?: "buyDate" | "soldDate" | "buyPrice" | "soldPrice";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the collection card
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection this card belongs to
                                 */
                                collectionId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card
                                 */
                                cardId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card parallel if applicable
                                 */
                                parallelId?: string;
                                /**
                                 * Format: uuid
                                 * @description UUID of the grade if card is graded
                                 */
                                gradeId?: string;
                                /**
                                 * @description Quantity of this card in the collection
                                 * @default 1
                                 */
                                quantity: number;
                                /** @description Purchase price of the card */
                                buyPrice?: string;
                                /** @description Date the card was purchased (YYYY-MM-DD) */
                                buyDate?: string;
                                /** @description Listed selling price of the card */
                                sellPrice?: string;
                                /** @description Actual sold price of the card */
                                soldPrice?: string;
                                /** @description Date the card was sold (YYYY-MM-DD) */
                                soldDate?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the collection card
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection this card belongs to
                                 */
                                collectionId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card
                                 */
                                cardId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card parallel if applicable
                                 */
                                parallelId?: string;
                                /**
                                 * Format: uuid
                                 * @description UUID of the grade if card is graded
                                 */
                                gradeId?: string;
                                /**
                                 * @description Quantity of this card in the collection
                                 * @default 1
                                 */
                                quantity: number;
                                /** @description Purchase price of the card */
                                buyPrice?: string;
                                /** @description Date the card was purchased (YYYY-MM-DD) */
                                buyDate?: string;
                                /** @description Listed selling price of the card */
                                sellPrice?: string;
                                /** @description Actual sold price of the card */
                                soldPrice?: string;
                                /** @description Date the card was sold (YYYY-MM-DD) */
                                soldDate?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add cards to collection
         * @description Add one or multiple cards to a collection with detailed tracking information.
         *
         *     **Supports two modes:**
         *     1. **Single Card**: Add one card with all metadata
         *     2. **Batch Mode**: Add up to 100 cards in a single request
         *
         *     **Card Metadata (all optional):**
         *     - **quantity**: Number of copies (default: 1)
         *     - **grade**: Professional grading (e.g., "PSA 10", "BGS 9.5")
         *     - **gradeCompany**: Grading service (PSA, BGS, SGC, etc.)
         *     - **purchasePrice**: What you paid for the card
         *     - **purchaseDate**: When you acquired it
         *     - **purchaseFrom**: Where/who you bought it from
         *     - **currentValue**: Current market value estimate
         *     - **condition**: Raw condition if ungraded (Mint, Near Mint, etc.)
         *     - **notes**: Personal notes about the card
         *     - **isForSale**: Mark card as available for sale
         *     - **salePrice**: Asking price if for sale
         *
         *     **Batch Operation:**
         *     - Use 'cards' array instead of single card fields
         *     - Mixed success/failure responses possible
         *     - Returns detailed results for each card
         *
         *     **Use Cases:**
         *     - Track new acquisitions
         *     - Import bulk collections
         *     - Record graded cards
         *     - Build want lists
         *     - Track investment portfolio
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the card to add to the collection
                         */
                        cardId: string;
                        /**
                         * Format: uuid
                         * @description UUID of the card parallel if applicable
                         */
                        parallelId?: string;
                        /**
                         * Format: uuid
                         * @description UUID of the grade if card is graded
                         */
                        gradeId?: string;
                        /**
                         * @description Quantity of this card to add
                         * @default 1
                         */
                        quantity?: number;
                        /** @description Purchase price (numeric string with up to 2 decimal places) */
                        buyPrice?: string;
                        /** @description Purchase date in YYYY-MM-DD format */
                        buyDate?: string;
                        /** @description Listed selling price (numeric string with up to 2 decimal places) */
                        sellPrice?: string;
                        /** @description Actual sold price (numeric string with up to 2 decimal places) */
                        soldPrice?: string;
                        /** @description Sale date in YYYY-MM-DD format */
                        soldDate?: string;
                    } | {
                        /**
                         * Format: uuid
                         * @description UUID of the card to add to the collection
                         */
                        cardId: string;
                        /**
                         * Format: uuid
                         * @description UUID of the card parallel if applicable
                         */
                        parallelId?: string;
                        /**
                         * Format: uuid
                         * @description UUID of the grade if card is graded
                         */
                        gradeId?: string;
                        /**
                         * @description Quantity of this card to add
                         * @default 1
                         */
                        quantity?: number;
                        /** @description Purchase price (numeric string with up to 2 decimal places) */
                        buyPrice?: string;
                        /** @description Purchase date in YYYY-MM-DD format */
                        buyDate?: string;
                        /** @description Listed selling price (numeric string with up to 2 decimal places) */
                        sellPrice?: string;
                        /** @description Actual sold price (numeric string with up to 2 decimal places) */
                        soldPrice?: string;
                        /** @description Sale date in YYYY-MM-DD format */
                        soldDate?: string;
                    }[];
                };
            };
            responses: {
                /** @description Single card or batch response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the collection card
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this card belongs to
                             */
                            collectionId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card
                             */
                            cardId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card parallel if applicable
                             */
                            parallelId?: string;
                            /**
                             * Format: uuid
                             * @description UUID of the grade if card is graded
                             */
                            gradeId?: string;
                            /**
                             * @description Quantity of this card in the collection
                             * @default 1
                             */
                            quantity: number;
                            /** @description Purchase price of the card */
                            buyPrice?: string;
                            /** @description Date the card was purchased (YYYY-MM-DD) */
                            buyDate?: string;
                            /** @description Listed selling price of the card */
                            sellPrice?: string;
                            /** @description Actual sold price of the card */
                            soldPrice?: string;
                            /** @description Date the card was sold (YYYY-MM-DD) */
                            soldDate?: string;
                        } | {
                            /** @description Successfully created cards */
                            cards: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the collection card
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection this card belongs to
                                 */
                                collectionId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card
                                 */
                                cardId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the card parallel if applicable
                                 */
                                parallelId?: string;
                                /**
                                 * Format: uuid
                                 * @description UUID of the grade if card is graded
                                 */
                                gradeId?: string;
                                /**
                                 * @description Quantity of this card in the collection
                                 * @default 1
                                 */
                                quantity: number;
                                /** @description Purchase price of the card */
                                buyPrice?: string;
                                /** @description Date the card was purchased (YYYY-MM-DD) */
                                buyDate?: string;
                                /** @description Listed selling price of the card */
                                sellPrice?: string;
                                /** @description Actual sold price of the card */
                                soldPrice?: string;
                                /** @description Date the card was sold (YYYY-MM-DD) */
                                soldDate?: string;
                            }[];
                            /** @description Any errors that occurred during batch creation */
                            errors?: {
                                /** @description Index of the failed item in the request array */
                                index: number;
                                /**
                                 * Format: uuid
                                 * @description Card ID that failed
                                 */
                                cardId: string;
                                /** @description Error message */
                                error: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get card details
         * @description Retrieve complete details for a specific card in a collection.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection
         *     - **cardId**: UUID of the collection card entry (not the catalog card ID)
         *
         *     **Response includes:**
         *     - Complete catalog card information
         *     - All collection-specific metadata
         *     - Purchase and sale information
         *     - Grading details if applicable
         *     - Current market value
         *     - Historical price data (if available)
         *     - Personal notes
         *
         *     **Use Cases:**
         *     - View full card details
         *     - Check card value and grade
         *     - Review purchase history
         *     - Prepare for sale listing
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the collection card
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this card belongs to
                             */
                            collectionId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card
                             */
                            cardId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card parallel if applicable
                             */
                            parallelId?: string;
                            /**
                             * Format: uuid
                             * @description UUID of the grade if card is graded
                             */
                            gradeId?: string;
                            /**
                             * @description Quantity of this card in the collection
                             * @default 1
                             */
                            quantity: number;
                            /** @description Purchase price of the card */
                            buyPrice?: string;
                            /** @description Date the card was purchased (YYYY-MM-DD) */
                            buyDate?: string;
                            /** @description Listed selling price of the card */
                            sellPrice?: string;
                            /** @description Actual sold price of the card */
                            soldPrice?: string;
                            /** @description Date the card was sold (YYYY-MM-DD) */
                            soldDate?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the collection card
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this card belongs to
                             */
                            collectionId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card
                             */
                            cardId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card parallel if applicable
                             */
                            parallelId?: string;
                            /**
                             * Format: uuid
                             * @description UUID of the grade if card is graded
                             */
                            gradeId?: string;
                            /**
                             * @description Quantity of this card in the collection
                             * @default 1
                             */
                            quantity: number;
                            /** @description Purchase price of the card */
                            buyPrice?: string;
                            /** @description Date the card was purchased (YYYY-MM-DD) */
                            buyDate?: string;
                            /** @description Listed selling price of the card */
                            sellPrice?: string;
                            /** @description Actual sold price of the card */
                            soldPrice?: string;
                            /** @description Date the card was sold (YYYY-MM-DD) */
                            soldDate?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        /**
         * Update card metadata
         * @description Update collection-specific metadata for a card.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection
         *     - **cardId**: UUID of the collection card entry
         *
         *     **Updatable Fields:**
         *     - **quantity**: Adjust number of copies
         *     - **grade**: Update or add grading info
         *     - **gradeCompany**: Change grading service
         *     - **purchasePrice**: Correct purchase price
         *     - **purchaseDate**: Fix acquisition date
         *     - **purchaseFrom**: Update source information
         *     - **currentValue**: Update market value estimate
         *     - **condition**: Change raw condition assessment
         *     - **notes**: Modify personal notes
         *     - **isForSale**: Toggle sale status
         *     - **salePrice**: Update asking price
         *     - **binderId**: Move to different binder
         *
         *     **Important Notes:**
         *     - Cannot change the catalog card reference
         *     - Updates are immediate
         *     - Previous values are not retained (no history)
         *     - Only the collection owner can update
         *
         *     **Use Cases:**
         *     - Update card after grading
         *     - Adjust quantities after sales
         *     - Update market values
         *     - Add or modify notes
         *     - Change sale status
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the card parallel (null to remove)
                         */
                        parallelId?: string | null;
                        /**
                         * Format: uuid
                         * @description UUID of the grade (null to remove)
                         */
                        gradeId?: string | null;
                        /** @description Updated quantity */
                        quantity?: number;
                        /** @description Purchase price (null to remove) */
                        buyPrice?: string | null;
                        /** @description Purchase date (null to remove) */
                        buyDate?: string | null;
                        /** @description Listed selling price (null to remove) */
                        sellPrice?: string | null;
                        /** @description Actual sold price (null to remove) */
                        soldPrice?: string | null;
                        /** @description Sale date (null to remove) */
                        soldDate?: string | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the collection card
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this card belongs to
                             */
                            collectionId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card
                             */
                            cardId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card parallel if applicable
                             */
                            parallelId?: string;
                            /**
                             * Format: uuid
                             * @description UUID of the grade if card is graded
                             */
                            gradeId?: string;
                            /**
                             * @description Quantity of this card in the collection
                             * @default 1
                             */
                            quantity: number;
                            /** @description Purchase price of the card */
                            buyPrice?: string;
                            /** @description Date the card was purchased (YYYY-MM-DD) */
                            buyDate?: string;
                            /** @description Listed selling price of the card */
                            sellPrice?: string;
                            /** @description Actual sold price of the card */
                            soldPrice?: string;
                            /** @description Date the card was sold (YYYY-MM-DD) */
                            soldDate?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the collection card
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this card belongs to
                             */
                            collectionId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card
                             */
                            cardId: string;
                            /**
                             * Format: uuid
                             * @description ID of the card parallel if applicable
                             */
                            parallelId?: string;
                            /**
                             * Format: uuid
                             * @description UUID of the grade if card is graded
                             */
                            gradeId?: string;
                            /**
                             * @description Quantity of this card in the collection
                             * @default 1
                             */
                            quantity: number;
                            /** @description Purchase price of the card */
                            buyPrice?: string;
                            /** @description Date the card was purchased (YYYY-MM-DD) */
                            buyDate?: string;
                            /** @description Listed selling price of the card */
                            sellPrice?: string;
                            /** @description Actual sold price of the card */
                            soldPrice?: string;
                            /** @description Date the card was sold (YYYY-MM-DD) */
                            soldDate?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Remove card from collection
         * @description Permanently remove a card entry from a collection.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the collection
         *     - **cardId**: UUID of the collection card entry to remove
         *
         *     **⚠️ WARNING:**
         *     - This action is **irreversible**
         *     - Removes all associated metadata (grade, purchase info, notes)
         *     - Does not affect the catalog card data
         *     - If you have multiple copies, this removes ALL of them
         *
         *     **Important Notes:**
         *     - Only the collection owner can remove cards
         *     - Returns 204 No Content on success
         *     - No response body is returned
         *
         *     **Use Cases:**
         *     - Remove sold cards
         *     - Clean up duplicate entries
         *     - Correct mistaken additions
         *     - Reorganize collections
         *
         *     **Alternative Actions:**
         *     - To reduce quantity, use PUT to update quantity field
         *     - To move to another collection, add to new collection first
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/binders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List collection binders
         * @description Retrieve all binders within a specific collection with pagination and filtering.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *
         *     **Query Parameters:**
         *     - **page**: Page number (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **type**: Filter by binder type (showcase, for_sale, for_trade, organizing)
         *     - **isPublic**: Filter by visibility (true/false)
         *     - **sortBy**: Sort field (name, createdAt, cardCount, sortOrder)
         *     - **sortOrder**: asc or desc (default: asc)
         *
         *     **Response includes:**
         *     - Binder metadata (name, type, description)
         *     - Card count per binder
         *     - Total value estimates
         *     - Creation and update timestamps
         *     - Pagination metadata
         *
         *     **Use Cases:**
         *     - Display binder overview
         *     - Navigate collection structure
         *     - Find specific binder types
         *     - Generate binder statistics
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Search by binder name (partial match) */
                    name?: string;
                    /** @description Field to sort by */
                    sort?: "name";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            binders: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the binder
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection this binder belongs to
                                 */
                                collectionId: string;
                                /** @description Name of the binder */
                                name?: string;
                                /** @description Description of the binder */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            binders: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the binder
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection this binder belongs to
                                 */
                                collectionId: string;
                                /** @description Name of the binder */
                                name?: string;
                                /** @description Description of the binder */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a binder
         * @description Create a new binder within a collection to organize subsets of cards.
         *
         *     A binder is a virtual container for grouping cards, similar to physical card binders or pages. Use binders to:
         *     - Organize cards by theme or set
         *     - Create sale lots or trade packages
         *     - Build showcase presentations
         *     - Group cards for specific purposes
         *
         *     **Binder Properties:**
         *     - **name**: Descriptive name (e.g., "1989 Rookies", "For Sale - PSA 10s")
         *     - **description**: Optional detailed description
         *     - **type**: Purpose designation (showcase, for_sale, for_trade, organizing)
         *     - **sortOrder**: Display order within collection
         *     - **isPublic**: Visibility setting for sharing
         *
         *     **Important Notes:**
         *     - Binders belong to a single collection
         *     - Cards can exist in multiple binders
         *     - Binder names must be unique within the collection
         *     - Empty binders are allowed
         *
         *     **Use Cases:**
         *     - Create themed showcases
         *     - Organize cards for sale
         *     - Build trade packages
         *     - Separate graded from raw cards
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the binder */
                        name?: string;
                        /** @description Description of the binder */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/binders/{binderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get binder details
         * @description Retrieve complete details for a specific binder.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the binder
         *
         *     **Response includes:**
         *     - Complete binder metadata
         *     - Card count and list preview
         *     - Total value calculation
         *     - Type and visibility settings
         *     - Timestamps
         *
         *     **Security:**
         *     - Only accessible to the collection owner
         *     - Returns 404 if binder doesn't exist or belongs to another client
         *
         *     **Use Cases:**
         *     - View binder contents
         *     - Load binder for editing
         *     - Share binder details
         *     - Prepare for trade or sale
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        /**
         * Update binder
         * @description Update an existing binder's properties.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the binder to update
         *
         *     **Updatable Fields:**
         *     - **name**: New binder name (must be unique within collection)
         *     - **description**: Updated description
         *     - **type**: Change binder type (showcase, for_sale, for_trade, organizing)
         *     - **isPublic**: Toggle visibility
         *     - **sortOrder**: Adjust display order
         *
         *     **Important Notes:**
         *     - Cannot change the parent collection
         *     - Binder ID remains the same
         *     - Cards in binder are not affected
         *     - Name must remain unique
         *
         *     **Use Cases:**
         *     - Rename binder
         *     - Change binder purpose
         *     - Update description
         *     - Adjust privacy settings
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the binder */
                        name?: string;
                        /** @description Description of the binder */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection this binder belongs to
                             */
                            collectionId: string;
                            /** @description Name of the binder */
                            name?: string;
                            /** @description Description of the binder */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete binder
         * @description Permanently delete a binder and remove all card associations.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the binder to delete
         *
         *     **⚠️ WARNING:**
         *     - This action is **irreversible**
         *     - All card-to-binder links will be removed
         *     - Cards remain in the collection (only binder organization is lost)
         *     - Binder metadata and settings are permanently deleted
         *
         *     **Important Notes:**
         *     - Does NOT delete the actual cards
         *     - Cards can still be accessed through the collection
         *     - Other binders are not affected
         *
         *     **Use Cases:**
         *     - Remove obsolete binders
         *     - Clean up organization
         *     - Delete test binders
         *     - Consolidate binders
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/binders/{binderId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List binder cards
         * @description Retrieve all cards organized within a specific binder.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the binder
         *
         *     **Query Parameters:**
         *     - **page**: Page number (default: 1)
         *     - **limit**: Items per page (default: 20, max: 100)
         *     - **sortBy**: Sort field (name, number, value, sortOrder)
         *     - **sortOrder**: asc or desc (default: asc)
         *     - **search**: Search card names
         *
         *     **Response includes:**
         *     - Full card details from catalog
         *     - Collection-specific metadata
         *     - Binder-specific sort order
         *     - Total value calculations
         *     - Pagination metadata
         *
         *     **Use Cases:**
         *     - View binder contents
         *     - Generate binder listings
         *     - Calculate binder value
         *     - Export binder inventory
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                };
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the binder card link
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the binder
                                 */
                                binderId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection card
                                 */
                                collectionCardId: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /**
                                 * Format: uuid
                                 * @description Unique identifier for the binder card link
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the binder
                                 */
                                binderId: string;
                                /**
                                 * Format: uuid
                                 * @description ID of the collection card
                                 */
                                collectionCardId: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add card to binder
         * @description Add an existing collection card to a binder for organization.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the target binder
         *
         *     **Request Body:**
         *     - **collectionCardId**: UUID of the collection card to add
         *     - **sortOrder**: Optional display order within binder
         *     - **notes**: Optional binder-specific notes
         *
         *     **Important Notes:**
         *     - Card must already exist in the collection
         *     - Same card can be in multiple binders
         *     - Does not duplicate the card, just creates a link
         *     - Original card metadata is preserved
         *
         *     **Use Cases:**
         *     - Organize cards into themed binders
         *     - Create sale or trade lots
         *     - Build showcases
         *     - Group cards for specific purposes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the collection card to add to the binder
                         */
                        collectionCardId: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the binder card link
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description ID of the binder
                             */
                            binderId: string;
                            /**
                             * Format: uuid
                             * @description ID of the collection card
                             */
                            collectionCardId: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/binders/{binderId}/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove card from binder
         * @description Remove a card's association with a binder without deleting it from the collection.
         *
         *     **Path Parameters:**
         *     - **collectionId**: UUID of the parent collection
         *     - **binderId**: UUID of the binder
         *     - **cardId**: UUID of the binder-card association
         *
         *     **Important Notes:**
         *     - Only removes the binder link, not the card itself
         *     - Card remains in the collection
         *     - Card can still be in other binders
         *     - This is reversible (card can be re-added)
         *
         *     **Use Cases:**
         *     - Reorganize binder contents
         *     - Remove sold cards from sale binder
         *     - Clean up binder organization
         *     - Move cards between binders
         *
         *     **Response:**
         *     - 204 No Content on success
         *     - No response body
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Binder UUID */
                    binderId: string;
                    /** @description Binder Card UUID (the link ID, not the collection card ID) */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/cards/{cardId}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection card image
         * @description Retrieve the full-resolution image added for the specified card within the collection.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Upload collection card image
         * @description Upload a photo of a card in your collection. Maximum file size: 2MB. Accepts JPEG, PNG, WebP, and HEIC formats.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Unique identifier for the image record
                             */
                            imageId: string;
                            /** @description Timestamp when the image was uploaded */
                            uploadedAt: string;
                            /** @description URL to retrieve the full-resolution image */
                            fullImageUrl: string;
                            /** @description URL to retrieve the thumbnail image */
                            thumbnailUrl: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/collection/{collectionId}/cards/{cardId}/image/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection card image thumbnail
         * @description Retrieve the thumbnail image added for the specified card within the collection.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Collection UUID */
                    collectionId: string;
                    /** @description Collection Card UUID */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all lists
         * @description Get all lists for the authenticated client with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                    /** @description Filter by collector UUID */
                    collectorId?: string;
                    /** @description Search by list name (partial match) */
                    name?: string;
                    /** @description Field to sort by */
                    sort?: "name";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            lists: {
                                /** @description Unique identifier for the list */
                                id: string;
                                /** @description ID of the collector who owns this list */
                                collectorId: string;
                                /** @description Name of the list */
                                name?: string;
                                /** @description Description of the list */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            lists: {
                                /** @description Unique identifier for the list */
                                id: string;
                                /** @description ID of the collector who owns this list */
                                collectorId: string;
                                /** @description Name of the list */
                                name?: string;
                                /** @description Description of the list */
                                description?: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new list
         * @description Create a new list of cards (want list, collection goals, etc.)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description UUID of the collector who will own this list */
                        collectorId: string;
                        /** @description Name of the list */
                        name?: string;
                        /** @description Description of the list */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists/{listId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific list
         * @description Get details of a specific list by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        /**
         * Update a list
         * @description Update a specific list by ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Name of the list */
                        name?: string;
                        /** @description Description of the list */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique identifier for the list */
                            id: string;
                            /** @description ID of the collector who owns this list */
                            collectorId: string;
                            /** @description Name of the list */
                            name?: string;
                            /** @description Description of the list */
                            description?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a list
         * @description Delete a specific list by ID. This will also remove all card associations.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists/{listId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all cards in a list
         * @description Get all cards in a specific list with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of items to return per page. Minimum: 1, Maximum: 1000, Default: 20. Use larger values for bulk data retrieval, smaller for responsive UIs. */
                    take?: number;
                    /** @description Number of items to skip (offset). Default: 0. Use for pagination: page 2 with take=20 would use skip=20, page 3 would use skip=40, etc. */
                    skip?: number;
                };
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description Internal ID for the list card */
                                id: string;
                                /** @description ID of the list */
                                listId: string;
                                /** @description ID of the card */
                                cardId: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cards: {
                                /** @description Internal ID for the list card */
                                id: string;
                                /** @description ID of the list */
                                listId: string;
                                /** @description ID of the card */
                                cardId: string;
                            }[];
                            total_count: number;
                            skip: number;
                            take: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add card(s) to a list
         * @description Add one or multiple cards to a specific list. Supports both single card and batch (up to 100 cards) operations.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description UUID of the card to add to the list */
                        cardId: string;
                    } | {
                        /** @description UUID of the card to add to the list */
                        cardId: string;
                    }[];
                };
            };
            responses: {
                /** @description Single card or batch response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Internal ID for the list card */
                            id: string;
                            /** @description ID of the list */
                            listId: string;
                            /** @description ID of the card */
                            cardId: string;
                        } | {
                            /** @description Successfully created cards */
                            cards: {
                                /** @description Internal ID for the list card */
                                id: string;
                                /** @description ID of the list */
                                listId: string;
                                /** @description ID of the card */
                                cardId: string;
                            }[];
                            /** @description Any errors that occurred during batch creation */
                            errors?: {
                                /** @description Index of the failed item in the request array */
                                index: number;
                                /** @description Card ID that failed */
                                cardId: string;
                                /** @description Error message */
                                error: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists/{listId}/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a card from a list
         * @description Remove a specific card from a list
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List UUID */
                    listId: string;
                    /** @description Card UUID to remove from list */
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/cards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get card image
         * @description Retrieve a card image by ID. Returns either raw JPEG (format=raw) or JSON with base64 data (format=json).
         */
        get: {
            parameters: {
                query?: {
                    format?: "raw" | "json";
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ai/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process a natural language query
         * @description Submit a plaintext natural language question via REST API and receive an AI-generated response.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Natural language query */
                        query: string;
                        /** @description Optional context for the query */
                        context?: {
                            /** Format: uuid */
                            collectionId?: string;
                            userId?: string;
                        } & {
                            [key: string]: unknown;
                        };
                        /** @description Optional conversation history (max 50 messages). Messages should alternate between user and assistant roles. */
                        conversationHistory?: {
                            /**
                             * @description The role of the message sender
                             * @enum {string}
                             */
                            role: "user" | "assistant";
                            /** @description The message content */
                            content: string;
                        }[];
                        /** @description Maximum tool use iterations (default: 5) */
                        maxIterations?: number;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description AI-generated response to the query */
                            answer: string;
                            /** @description List of MCP tools used to answer the query */
                            toolsUsed?: string[];
                            /** @description Time taken to process the query in milliseconds */
                            processingTime: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/release/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for a release
         * @description Submit feedback for a specific release in the CardSight catalog.
         *
         *     Use this endpoint to report:
         *     - Incorrect release information (name, year, manufacturer)
         *     - Missing or incorrect release metadata
         *     - Data quality issues with the release
         *     - General suggestions for improvement
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/set/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for a set
         * @description Submit feedback for a specific set within a release.
         *
         *     Use this endpoint to report:
         *     - Incorrect set information (name, card count, subset designation)
         *     - Missing or duplicate sets
         *     - Incorrect set ordering or numbering
         *     - Data quality issues specific to the set
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/card/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for a card
         * @description Submit feedback for a specific card in the catalog.
         *
         *     Use this endpoint to report:
         *     - Incorrect player name or card details
         *     - Wrong card number or designation
         *     - Missing or incorrect parallel/variant information
         *     - Incorrect card attributes (rookie card, autograph, memorabilia)
         *     - Image quality issues or wrong image
         *     - Pricing discrepancies
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/manufacturer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for a manufacturer
         * @description Submit feedback for a specific card manufacturer.
         *
         *     Use this endpoint to report:
         *     - Incorrect manufacturer name or branding
         *     - Missing manufacturer information
         *     - Manufacturer relationship issues
         *     - Historical inaccuracies about the manufacturer
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/segment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for a segment
         * @description Submit feedback for a specific market segment (e.g., Baseball, Football, Basketball).
         *
         *     Use this endpoint to report:
         *     - Incorrect segment categorization
         *     - Missing segment information
         *     - Segment metadata issues
         *     - General suggestions for segment organization
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/identify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit feedback for card identification
         * @description Submit feedback for a card identification result from the AI identification service.
         *
         *     Use this endpoint to report:
         *     - Incorrect card identification from uploaded image
         *     - Wrong player or card details identified
         *     - Misidentified year, set, or manufacturer
         *     - AI confidence score issues
         *     - Suggestions to improve identification accuracy
         *
         *     This feedback helps improve our AI card identification model.
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message for the same entity within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit general feedback
         * @description Submit general feedback about the CardSight API or catalog that is not specific to any particular entity.
         *
         *     Use this endpoint for:
         *     - API feature requests or suggestions
         *     - General data quality observations
         *     - Platform-wide issues or improvements
         *     - User experience feedback
         *     - Documentation or integration feedback
         *     - Business inquiries or partnerships
         *
         *     Unlike other feedback endpoints, this does not require an entity ID.
         *
         *     **Rate Limiting**: Maximum 50 feedback submissions per day per API key
         *     **Duplicate Detection**: Same feedback message within 1 hour will be rejected
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        feedback_type?: "data_error" | "missing_data" | "suggestion" | "bug" | "other";
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/feedback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve feedback by ID
         * @description Retrieve a previously submitted feedback entry by its unique ID.
         *
         *     **Important Security Notes:**
         *     - You can only retrieve feedback submitted by your own API key
         *     - Attempting to access feedback from another client will result in a 403 Forbidden error
         *     - The unique ID is a UUID that was returned when the feedback was originally submitted
         *
         *     Use this endpoint to:
         *     - Check the status of your submitted feedback
         *     - Retrieve details of feedback for your own records
         *     - Verify that feedback was successfully submitted
         *
         *     **Response Codes:**
         *     - 200: Feedback found and belongs to your client
         *     - 401: Authentication required
         *     - 403: Feedback exists but belongs to another client
         *     - 404: Feedback ID not found
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                            data: {
                                /** Format: uuid */
                                unique_id: string;
                                /** @enum {string} */
                                entity_type: "release" | "set" | "card" | "product" | "manufacturer" | "segment" | "general" | "identify";
                                /** Format: uuid */
                                entity_id: string | null;
                                /** @enum {string|null} */
                                feedback_type: "data_error" | "missing_data" | "suggestion" | "bug" | "other" | null;
                                message: string;
                                /** @enum {string} */
                                status: "not_reviewed" | "under_review" | "fixed" | "wont_fix" | "duplicate" | "need_info";
                                created_at: string;
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscription information
         * @description Retrieve subscription usage information for the authenticated client.
         *
         *     **Returns:**
         *     - Total aggregate API calls made across all API keys for the current billing period
         *     - Array containing usage information for the current API key being used to make this request
         *
         *     **Billing Period:**
         *     - The billing period is calculated monthly (first day of the current month to present)
         *     - Usage data is tracked in the api_key_usage_monthly table
         *     - Calls are aggregated across all API keys belonging to the client
         *
         *     **Response Fields:**
         *     - `calls`: Total number of API calls across all your API keys for the current billing period
         *     - `api_keys`: Array with one element showing the current API key and its usage
         *       - `key`: The API key used to make this request
         *       - `calls`: Number of API calls made using this specific key for the current billing period
         *
         *     **Example Response:**
         *     ```json
         *     {
         *       "calls": 1250,
         *       "api_keys": [
         *         {
         *           "key": "csa_live_abc123...",
         *           "calls": 450
         *         }
         *       ]
         *     }
         *     ```
         *
         *     **Use Cases:**
         *     - Monitor your API usage to stay within subscription limits
         *     - Track usage by individual API key
         *     - Identify which keys are making the most requests
         *     - Billing and cost tracking
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Total aggregate number of API calls made across all API keys for the current billing period */
                            calls: number;
                            /** @description Array containing usage information for the current API key only */
                            api_keys: {
                                /** @description The API key (masked or full depending on context) */
                                key: string;
                                /** @description Total number of API calls made using this key for the current billing period */
                                calls: number;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grades/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all grading companies
         * @description Retrieve a complete list of all grading companies available in the system.
         *
         *     **Grading companies** are organizations that authenticate and grade trading cards, such as PSA, BGS (Beckett), SGC, and CGC.
         *
         *     **Response includes:**
         *     - List of all grading companies with metadata
         *     - Company names, descriptions, and notes
         *     - Total count of companies
         *
         *     **Use Cases:**
         *     - Display grading company selection in UI
         *     - Populate dropdown menus for grading filters
         *     - Show available grading options to users
         *     - Reference data for collection management
         *
         *     **Example Companies:**
         *     - PSA (Professional Sports Authenticator)
         *     - BGS (Beckett Grading Services)
         *     - SGC (Sportscard Guaranty)
         *     - CGC (Certified Guaranty Company)
         *
         *     **Important Notes:**
         *     - This endpoint returns all companies in the system
         *     - Companies are sorted alphabetically by name
         *     - No authentication required (public reference data)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            companies: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            companies: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grades/companies/{companyId}/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get grading types for a company
         * @description Retrieve all grading types offered by a specific grading company.
         *
         *     **Grading types** represent different grading services offered by a company, such as:
         *     - PSA: Regular, Crossover, Dual Grade
         *     - BGS: Standard, Black Label, Pristine
         *     - SGC: Regular, Tuxedo, Premium
         *
         *     **Path Parameters:**
         *     - **companyId**: UUID of the grading company
         *
         *     **Response includes:**
         *     - List of all grading types for the company
         *     - Type names, descriptions, and notes
         *     - Parent grading company information for context
         *     - Total count of types
         *
         *     **Use Cases:**
         *     - Display available grading services for a company
         *     - Filter grades by grading type
         *     - Show grading options when adding cards to collection
         *     - Populate grading type selection in UI
         *
         *     **Example Types:**
         *     - PSA Regular (standard PSA grading)
         *     - BGS Black Label (perfect 10 across all subgrades)
         *     - SGC Tuxedo (premium black label holder)
         *
         *     **Important Notes:**
         *     - Types are specific to each grading company
         *     - Returns 404 if company ID doesn't exist
         *     - Types are sorted alphabetically by name
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    companyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            types: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                            gradingCompany: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            types: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                            gradingCompany: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grades/companies/{companyId}/types/{typeId}/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get grades for a grading type
         * @description Retrieve all specific grades available for a grading type.
         *
         *     **Grades** are the actual numeric/letter grades assigned to cards, such as:
         *     - PSA: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
         *     - BGS: 1, 1.5, 2, 2.5, ... 9, 9.5, 10
         *     - SGC: 1, 1.5, 2, 2.5, ... 9, 9.5, 10
         *
         *     **Path Parameters:**
         *     - **companyId**: UUID of the grading company
         *     - **typeId**: UUID of the grading type
         *
         *     **Response includes:**
         *     - List of all grades for the grading type
         *     - Grade values (as strings to support decimals like "9.5")
         *     - Parent grading type and company information for context
         *     - Total count of grades
         *
         *     **Use Cases:**
         *     - Display available grades when adding graded cards to collection
         *     - Filter collection cards by specific grade
         *     - Show grade options in grading selection UI
         *     - Validate grade values for card submissions
         *
         *     **Example Grades:**
         *     - PSA 10 (Gem Mint)
         *     - PSA 9 (Mint)
         *     - BGS 9.5 (Gem Mint)
         *     - SGC 10 (Pristine)
         *
         *     **Important Notes:**
         *     - Grades are specific to each grading type
         *     - Grade values are stored as strings to support decimal grades
         *     - Returns 404 if company or type ID doesn't exist
         *     - Validates that the type belongs to the specified company
         *     - Grades are sorted by their grade value
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    companyId: string;
                    typeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            grades: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingTypeId: string;
                                gradingTypeName: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                grade: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                            gradingType: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            gradingCompany: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            grades: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingTypeId: string;
                                gradingTypeName: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                grade: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            total: number;
                            gradingType: {
                                /** Format: uuid */
                                id: string;
                                /** Format: uuid */
                                gradingCompanyId: string;
                                gradingCompanyName: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            gradingCompany: {
                                /** Format: uuid */
                                id: string;
                                name: string;
                                description: string | null;
                                note: string | null;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Error message */
                            error: string;
                            /** @description Error code for programmatic handling */
                            code: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
